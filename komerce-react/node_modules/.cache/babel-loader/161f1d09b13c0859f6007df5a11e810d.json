{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\Komerce-Ecomerce-main\\\\komerce-react\\\\src\\\\constants\\\\protected-route.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Login from '../pages/login';\nimport { Navigate } from 'react-router-dom';\nimport AuthContext from '../context/authContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProtectedRoute = _ref => {\n  _s();\n\n  let {\n    component: RouteComponent\n  } = _ref;\n  const authCtx = useContext(AuthContext);\n  const [loading, setLoading] = useState(true);\n  const [isAuth, setIsAuth] = useState(false);\n  const [data, setData] = useState();\n\n  const getSession = async () => {\n    console.log(\"sessions\");\n    const result = await fetch(\"http://localhost:3000/user/sessions\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await result.json();\n    console.log(data);\n\n    if (data.isAuth) {\n      setIsAuth(data.isAuth);\n      setData(data);\n      authCtx.setdata(data);\n    } // setLoading(true)\n    // if(data.isAuth){\n    //     setData(data)\n    //     setIsAuth(data.isAuth)\n    // }else{\n    //     setData('')\n    //     setIsAuth(false)\n    // }\n    // setLoading(false)\n\n  }; // getSession()\n\n\n  useEffect(() => {\n    getSession();\n  }, []);\n  console.log(loading, isAuth);\n  console.log(authCtx.loading);\n\n  if (!loading || !isAuth) {\n    return /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  } else {\n    //  if(isAuth){\n    //      console.log(\"yes auth\")\n    //     return <RouteComponent/>\n    //  }else{\n    //      console.log(\"not auth\")\n    //     return <Login/>\n    //  }\n    return /*#__PURE__*/_jsxDEV(RouteComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this);\n  }\n};\n\n_s(ProtectedRoute, \"zvtYBYb9YG7paZM18q0EGCDQg+M=\");\n\n_c = ProtectedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"sources":["C:/Users/Admin/Downloads/Komerce-Ecomerce-main/komerce-react/src/constants/protected-route.js"],"names":["React","useContext","useEffect","useState","Login","Navigate","AuthContext","ProtectedRoute","component","RouteComponent","authCtx","loading","setLoading","isAuth","setIsAuth","data","setData","getSession","console","log","result","fetch","method","credentials","headers","json","setdata"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AAEA,OAAOC,WAAP,MAAwB,wBAAxB;;AAEA,OAAO,MAAMC,cAAc,GAAG,QAAiC;AAAA;;AAAA,MAAhC;AAACC,IAAAA,SAAS,EAAEC;AAAZ,GAAgC;AAC3D,QAAMC,OAAO,GAAGT,UAAU,CAACK,WAAD,CAA1B;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,EAAhC;;AAEA,QAAMc,UAAU,GAAG,YAAW;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMC,MAAM,GAAG,MAAMC,KAAK,CAAC,qCAAD,EAAwC;AAC9DC,MAAAA,MAAM,EAAE,KADsD;AAE9DC,MAAAA,WAAW,EAAE,SAFiD;AAG9DC,MAAAA,OAAO,EAAE;AACT,wBAAgB;AADP;AAHqD,KAAxC,CAA1B;AAOA,UAAMT,IAAI,GAAG,MAAMK,MAAM,CAACK,IAAP,EAAnB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AACA,QAAGA,IAAI,CAACF,MAAR,EAAe;AACXC,MAAAA,SAAS,CAACC,IAAI,CAACF,MAAN,CAAT;AACAG,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAL,MAAAA,OAAO,CAACgB,OAAR,CAAgBX,IAAhB;AACH,KAfyB,CAgB1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,GAzBD,CAN2D,CAgC/D;;;AACAb,EAAAA,SAAS,CAAC,MAAK;AACXe,IAAAA,UAAU;AACb,GAFQ,EAEP,EAFO,CAAT;AAGIC,EAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ,EAAqBE,MAArB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYT,OAAO,CAACC,OAApB;;AACC,MAAG,CAACA,OAAD,IAAY,CAACE,MAAhB,EAAuB;AACpB,wBAAO,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACF,GAFD,MAEK;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAO,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AAEF;AACL,CAnDM;;GAAMN,c;;KAAAA,c","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport Login from '../pages/login';\nimport {Navigate} from 'react-router-dom'\n\nimport AuthContext from '../context/authContext';\n\nexport const ProtectedRoute = ({component: RouteComponent}) => {\n    const authCtx = useContext(AuthContext);\n    const [loading, setLoading] = useState(true)\n    const [isAuth, setIsAuth] = useState(false)\n    const [data, setData] = useState();\n\n    const getSession = async() => {\n        console.log(\"sessions\")\n        const result = await fetch(\"http://localhost:3000/user/sessions\", {\n            method: \"GET\",\n            credentials: \"include\",\n            headers: {\n            \"Content-Type\": \"application/json\",\n            },\n        });\n        const data = await result.json();\n        console.log(data)\n        if(data.isAuth){\n            setIsAuth(data.isAuth)\n            setData(data)\n            authCtx.setdata(data)\n        }\n        // setLoading(true)\n        // if(data.isAuth){\n        //     setData(data)\n        //     setIsAuth(data.isAuth)\n        // }else{\n        //     setData('')\n        //     setIsAuth(false)\n        // }\n        // setLoading(false)\n    }\n// getSession()\nuseEffect(()=> {\n    getSession()\n},[])\n    console.log(loading, isAuth)\n    console.log(authCtx.loading)\n     if(!loading || !isAuth){\n        return <Login />\n     }else{\n        //  if(isAuth){\n        //      console.log(\"yes auth\")\n        //     return <RouteComponent/>\n        //  }else{\n        //      console.log(\"not auth\")\n        //     return <Login/>\n        //  }\n        return <RouteComponent/>\n            \n     }\n}"]},"metadata":{},"sourceType":"module"}