{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\Komerce-Ecomerce-main\\\\komerce-react\\\\src\\\\context\\\\authContext.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// const AuthContext = React.createContext({\n//   sessionId: '',\n//   // token: '',\n//   userId: '',\n//   role: '',\n//   cartId: null,\n//   orderId: '',\n//   isAuth: false,\n//   isLoggedIn: false,\n//   onLogout: () => {},\n//   onLogin: (sessionId, isAuth) => {},\n//   onCart: (cartId) => {},\n// });\n// // console.log(AuthContext);\n// export const AuthContextProvider = (props) => {\n//     // const [token, setToken] = useState('');\n//     const [sessionId, setSessionId] = useState('');\n//     const [isLoggedIn, setIsLoggedIn] = useState(false);\n//     const [isAuth, setIsAuth] = useState(false);\n//     const [userId, setUserId] = useState('');\n//     const [cartId, setCartId] = useState('');\n//     const [role, setRole] = useState('');\n//     const [orderId, setOrderId] = useState('');\n//     const [data, setData] = useState();\n//     const [loading, setLoading] = useState(false)\n//     // console.log(isLoggedIn)\n//     // console.log(sessionId)\n//     const getSession = async() => {\n//       console.log(\"sessions\")\n//       // const data = await axios.get(\"http://localhost:3000/user/sessions\")\n//       const result = await fetch(\"http://localhost:3000/user/sessions\", {\n//         method: \"GET\",\n//         credentials: \"include\",\n//         headers: {\n//         \"Content-Type\": \"application/json\",\n//         },\n//       });\n//       const data = await result.json();\n//       console.log(\"It is\",data)\n//       if(data.loggedIn){\n//         setData(data)\n//       }\n//       setLoading(true)\n//     }\n//     useEffect(() => {\n//       getSession();\n//       const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n//       // console.log(storedUserLoggedInInformation)\n//       // if (storedUserLoggedInInformation === token) {\n//       //   setIsLoggedIn(true);\n//       // }\n//       if(storedUserLoggedInInformation === sessionId){\n//         setIsLoggedIn(true);\n//       }\n//     }, [sessionId]);\n//     const logoutHandler = () => {\n//       // console.log(\"entered logout\")\n//       // setToken('');\n//       setSessionId('');\n//       setUserId('');\n//       setRole('');\n//       localStorage.removeItem('isLoggedIn');\n//       setIsLoggedIn(false);\n//       setIsAuth(false);\n//       setCartId(null);\n//       setOrderId('');\n//     };\n//     const loginHandler = (sessionId, isAuth, userId, cartId, role) => {\n//       // console.log(\"entered login\")\n//       console.log(sessionId)\n//       // setToken(token)\n//       setSessionId(sessionId)\n//       setIsAuth(isAuth);\n//       setUserId(userId);\n//       setCartId(cartId);\n//       setRole(role)\n//       // localStorage.setItem('isLoggedIn', token);\n//       localStorage.setItem('isLoggedIn', sessionId);\n//       setIsLoggedIn(true);\n//     };\n//     const cartHandler = (cartId) => {\n//       console.log(cartId);\n//       setCartId(cartId)\n//     }\n//     const orderHandler = (orderId) =>{\n//       setOrderId(orderId)\n//     }\n//     const contextVal = {\n//       sessionId: sessionId,\n//       userId: userId,\n//       cartId: cartId,\n//       orderId: orderId,\n//       role: role,\n//       // token: token,\n//       isLoggedIn: isLoggedIn,\n//       isAuth: isAuth,\n//       onLogout: logoutHandler,\n//       onLogin: loginHandler,\n//       onCart: cartHandler,\n//       onOrder: orderHandler,\n//     }\n//     console.log(contextVal)\n//     return (\n//       <AuthContext.Provider value={contextVal}>\n//         {props.children}\n//       </AuthContext.Provider>\n//     );\n// };\n// export default AuthContext;\nimport React, { useState, useEffect } from 'react';\nimport { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from 'react/cjs/react.production.min';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  values: [],\n  userId: '',\n  role: '',\n  sessionId: '',\n  orderId: '',\n  cartId: null,\n  isAuth: false,\n  loading: Boolean,\n  isLoggedIn: false,\n  setdata: data => {},\n  onLogin: data => {},\n  onLogout: () => {},\n  onOrder: orderId => {},\n  onCart: cartId => {},\n  onSession: sessionId => {} // getSession: () => {}\n\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [data, setData] = useState();\n  const [loading, setLoading] = useState(true);\n  const [userId, setUserId] = useState('');\n  const [orderId, setOrderId] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [sessionId, setSessionId] = useState('');\n  const [isAuth, setIsAuth] = useState('');\n  const [cartId, setCartId] = useState('');\n  const [role, setRole] = useState(''); // const getSession = async() => {\n  //     console.log(\"sessions\")\n  //     const result = await fetch(\"http://localhost:3000/user/sessions\", {\n  //       method: \"GET\",\n  //       credentials: \"include\",\n  //       headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       },\n  //     });\n  //     const data = await result.json();\n  //     if(data.isAuth){\n  //       setData(data)\n  //       setIsAuth(data.isAuth)\n  //       setLoading(false)\n  //       return data\n  //     }\n  // }\n\n  const loginHandler = async data => {\n    // console.log(sessionId)\n    setData(data);\n    setUserId(data.userData.userId);\n    setRole(data.userData.role); // setLoading(false);\n    // setSessionId(sessionId)\n    // if(sessionId) {\n    //   setLoading(false);\n    // }\n\n    localStorage.setItem('isLoggedIn', sessionId);\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    setSessionId('');\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n    setOrderId('');\n    setIsAuth(false);\n  };\n\n  const orderHandler = orderId => {\n    setOrderId(orderId);\n  };\n\n  const cartHandler = cartId => {\n    console.log(cartId);\n    setCartId(cartId);\n  };\n\n  const sessionHandler = sessionId => {\n    setSessionId(sessionId);\n  };\n\n  const setdata = setdata => {\n    setCartId(setData);\n  };\n\n  const contextVal = {\n    values: data,\n    userId: userId,\n    role: role,\n    sessionId: sessionId,\n    orderId: orderId,\n    cartId: cartId,\n    isAuth: isAuth,\n    loading: loading,\n    isLoggedIn: isLoggedIn,\n    onOrder: orderHandler,\n    setdata: setData,\n    onLogin: loginHandler,\n    onLogout: logoutHandler,\n    onCart: cartHandler,\n    onSession: sessionHandler // getSession: getSession\n\n  };\n  console.log(contextVal);\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn'); // console.log(storedUserLoggedInInformation)\n    // if (storedUserLoggedInInformation === token) {\n    //   setIsLoggedIn(true);\n    // }\n\n    if (storedUserLoggedInInformation === sessionId) {\n      console.log(\"entered\");\n      setIsLoggedIn(true);\n    }\n  }, [sessionId]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextVal,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 7\n  }, this);\n}; // export const useAuth = ()=>{\n//   return useContext(AuthContext)\n// }\n\n_s(AuthContextProvider, \"VMB7Nc5h4YLstjc+3yhlZ5hhtbU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/Admin/Downloads/Komerce-Ecomerce-main/komerce-react/src/context/authContext.js"],"names":["React","useState","useEffect","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","AuthContext","createContext","values","userId","role","sessionId","orderId","cartId","isAuth","loading","Boolean","isLoggedIn","setdata","data","onLogin","onLogout","onOrder","onCart","onSession","AuthContextProvider","props","setData","setLoading","setUserId","setOrderId","setIsLoggedIn","setSessionId","setIsAuth","setCartId","setRole","loginHandler","userData","localStorage","setItem","logoutHandler","removeItem","orderHandler","cartHandler","console","log","sessionHandler","contextVal","storedUserLoggedInInformation","getItem","children"],"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","sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const AuthContext = React.createContext({\n//   sessionId: '',\n//   // token: '',\n//   userId: '',\n//   role: '',\n//   cartId: null,\n//   orderId: '',\n//   isAuth: false,\n//   isLoggedIn: false,\n//   onLogout: () => {},\n//   onLogin: (sessionId, isAuth) => {},\n//   onCart: (cartId) => {},\n// });\n\n// // console.log(AuthContext);\n// export const AuthContextProvider = (props) => {\n//     // const [token, setToken] = useState('');\n//     const [sessionId, setSessionId] = useState('');\n//     const [isLoggedIn, setIsLoggedIn] = useState(false);\n//     const [isAuth, setIsAuth] = useState(false);\n//     const [userId, setUserId] = useState('');\n//     const [cartId, setCartId] = useState('');\n//     const [role, setRole] = useState('');\n//     const [orderId, setOrderId] = useState('');\n//     const [data, setData] = useState();\n//     const [loading, setLoading] = useState(false)\n//     // console.log(isLoggedIn)\n//     // console.log(sessionId)\n//     const getSession = async() => {\n//       console.log(\"sessions\")\n//       // const data = await axios.get(\"http://localhost:3000/user/sessions\")\n//       const result = await fetch(\"http://localhost:3000/user/sessions\", {\n//         method: \"GET\",\n//         credentials: \"include\",\n//         headers: {\n//         \"Content-Type\": \"application/json\",\n//         },\n//       });\n//       const data = await result.json();\n//       console.log(\"It is\",data)\n//       if(data.loggedIn){\n//         setData(data)\n//       }\n//       setLoading(true)\n//     }\n\n//     useEffect(() => {\n//       getSession();\n//       const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n//       // console.log(storedUserLoggedInInformation)\n\n//       // if (storedUserLoggedInInformation === token) {\n//       //   setIsLoggedIn(true);\n//       // }\n//       if(storedUserLoggedInInformation === sessionId){\n//         setIsLoggedIn(true);\n//       }\n//     }, [sessionId]);\n\n//     const logoutHandler = () => {\n//       // console.log(\"entered logout\")\n//       // setToken('');\n//       setSessionId('');\n//       setUserId('');\n//       setRole('');\n//       localStorage.removeItem('isLoggedIn');\n//       setIsLoggedIn(false);\n//       setIsAuth(false);\n//       setCartId(null);\n//       setOrderId('');\n\n//     };\n\n//     const loginHandler = (sessionId, isAuth, userId, cartId, role) => {\n//       // console.log(\"entered login\")\n//       console.log(sessionId)\n//       // setToken(token)\n//       setSessionId(sessionId)\n//       setIsAuth(isAuth);\n//       setUserId(userId);\n//       setCartId(cartId);\n//       setRole(role)\n//       // localStorage.setItem('isLoggedIn', token);\n//       localStorage.setItem('isLoggedIn', sessionId);\n//       setIsLoggedIn(true);\n//     };\n\n//     const cartHandler = (cartId) => {\n//       console.log(cartId);\n//       setCartId(cartId)\n//     }\n\n//     const orderHandler = (orderId) =>{\n//       setOrderId(orderId)\n//     }\n\n//     const contextVal = {\n//       sessionId: sessionId,\n//       userId: userId,\n//       cartId: cartId,\n//       orderId: orderId,\n//       role: role,\n//       // token: token,\n//       isLoggedIn: isLoggedIn,\n//       isAuth: isAuth,\n//       onLogout: logoutHandler,\n//       onLogin: loginHandler,\n//       onCart: cartHandler,\n//       onOrder: orderHandler,\n//     }\n//     console.log(contextVal)\n//     return (\n//       <AuthContext.Provider value={contextVal}>\n//         {props.children}\n//       </AuthContext.Provider>\n//     );\n// };\n\n// export default AuthContext;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from 'react/cjs/react.production.min';\n\nconst AuthContext = React.createContext({\n  values: [],\n  userId: '',\n  role: '',\n  sessionId: '',\n  orderId: '',\n  cartId: null,\n  isAuth: false,\n  loading: Boolean,\n  isLoggedIn: false,\n  setdata: (data) => {},\n  onLogin: (data) => {},\n  onLogout: () => {},\n  onOrder: (orderId) => {},\n  onCart: (cartId) => {},\n  onSession: (sessionId) => {},\n  // getSession: () => {}\n});\n\nexport const AuthContextProvider = (props) => {\n  const [data, setData] = useState();\n  const [loading, setLoading] = useState(true);\n  const [userId, setUserId] = useState('')\n  const [orderId, setOrderId] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [sessionId, setSessionId] = useState('');\n  const [isAuth, setIsAuth] = useState('');\n  const [cartId, setCartId] = useState('');\n  const [role, setRole] = useState('')\n\n  // const getSession = async() => {\n  //     console.log(\"sessions\")\n  //     const result = await fetch(\"http://localhost:3000/user/sessions\", {\n  //       method: \"GET\",\n  //       credentials: \"include\",\n  //       headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       },\n  //     });\n  //     const data = await result.json();\n  //     if(data.isAuth){\n  //       setData(data)\n  //       setIsAuth(data.isAuth)\n  //       setLoading(false)\n  //       return data\n  //     }\n     \n  // }\n\n  const loginHandler = async(data) => {\n    // console.log(sessionId)\n    setData(data);\n    setUserId(data.userData.userId)\n    setRole(data.userData.role)\n   // setLoading(false);\n    // setSessionId(sessionId)\n    // if(sessionId) {\n    //   setLoading(false);\n    // }\n    localStorage.setItem('isLoggedIn', sessionId);\n    setIsLoggedIn(true);\n  }\n\n  const logoutHandler = () => {\n    setSessionId('');\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n    setOrderId('');\n    setIsAuth(false)\n  }\n\n  const orderHandler = (orderId) =>{\n    setOrderId(orderId)\n  }\n\n  const cartHandler = (cartId) => {\n    console.log(cartId);\n    setCartId(cartId)\n  }\n\n  const sessionHandler = (sessionId) => {\n    setSessionId(sessionId)\n  }\n\n  const setdata = (setdata) => {\n    setCartId(setData)\n  }\n\n  const contextVal = {\n      values: data,\n      userId: userId,\n      role: role,\n      sessionId: sessionId,\n      orderId: orderId,\n      cartId: cartId,\n      isAuth: isAuth,\n      loading: loading,\n      isLoggedIn: isLoggedIn,\n      onOrder: orderHandler,\n      setdata: setData,\n      onLogin: loginHandler,\n      onLogout: logoutHandler,\n      onCart: cartHandler,\n      onSession: sessionHandler,\n      // getSession: getSession\n  }\n  console.log(contextVal)\n\n  useEffect(() => {\n  \n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n    // console.log(storedUserLoggedInInformation)\n\n    // if (storedUserLoggedInInformation === token) {\n    //   setIsLoggedIn(true);\n    // }\n    if(storedUserLoggedInInformation === sessionId){\n        console.log(\"entered\")\n        setIsLoggedIn(true);\n    }\n  }, [sessionId]);\n\n  return (\n      <AuthContext.Provider value={contextVal}>\n        {props.children}\n      </AuthContext.Provider>\n    );\n}\n// export const useAuth = ()=>{\n//   return useContext(AuthContext)\n// }\n\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}